#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_SIZE 100

// function declarations
extern int pop();
extern void push(int);
void max_heapify(int arr[], int n, int i);
void heap_sort(int arr[], int n);

int main(int argc, char * argv[])
{
  int input_values[MAX_SIZE]; // assuming a maximum of 100 input values
  int count = 0;

  // read input values
  int value;
  while (scanf("%d\n", &value) != EOF && count < MAX_SIZE) {
    fprintf(stderr, "READING INPUT: %d\n", value);
    input_values[count++] = value;
  }

  // sort input values using max-heap
  heap_sort(input_values, count);

  // print sorted values
  printf("Sorted values:\n");
  for (int i = 0; i < count; i++) {
    printf("%d\n", input_values[i]);
  }

  exit(0);
}

// function to perform max-heapify operation on array
void max_heapify(int arr[], int n, int i)
{
  int largest = i;  // initialize largest as root
  int left = 2 * i + 1;  // left child index
  int right = 2 * i + 2;  // right child index

  // if left child is larger than root
  if (left < n && arr[left] > arr[largest]) {
    largest = left;
  }

  // if right child is larger than largest so far
  if (right < n && arr[right] > arr[largest]) {
    largest = right;
  }

  // if largest is not root
  if (largest != i) {
    // swap arr[i] with arr[largest]
    int temp = arr[i];
    arr[i] = arr[largest];
    arr[largest] = temp;

    // recursively max-heapify the affected sub-tree
    max_heapify(arr, n, largest);
  }
}

// function to perform heap sort on array
void heap_sort(int arr[], int n)
{
  // build max heap from array
  for (int i = n / 2 - 1; i >= 0; i--) {
    max_heapify(arr, n, i);
  }

  // extract elements from heap one by one
  for (int i = n - 1; i >= 0; i--) {
    // move current root to end
    int temp = arr[0];
    arr[0] = arr[i];
    arr[i] = temp;

    // call max heapify on the reduced heap
    max_heapify(arr, i, 0);
  }
}

